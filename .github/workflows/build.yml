name: Build DiVERE Application

on:
  push:
    tags: ['v*']  # 发布版本时触发
  pull_request:
    branches: [main, develop]  # PR 时触发
  workflow_dispatch:  # 手动触发

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']
        include:
          - os: ubuntu-latest
            platform: linux
            extension: ''
          - os: windows-latest
            platform: windows
            extension: '.exe'
          - os: macos-latest
            platform: macos
            extension: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl readline sqlite3 xz zlib

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Nuitka
      run: |
        pip install nuitka

    - name: Build with Nuitka (Manual)
      run: |
        # 创建输出目录
        mkdir -p dist
        
        # 运行Nuitka编译
        python -m nuitka \
          --standalone \
          --enable-plugin=pyside6 \
          --output-dir=dist \
          --output-filename=DiVERE${{ matrix.extension }} \
          --include-data-dir=config=config \
          --include-data-file=divere/colorConstancyModels/net_awb.onnx=models/net_awb.onnx \
          --assume-yes-for-downloads \
          ${{ matrix.os == 'windows-latest' && '--windows-disable-console' || '' }} \
          ${{ matrix.os == 'macos-latest' && '--macos-create-app-bundle' || '' }} \
          divere/__main__.py
        
        echo "✅ Nuitka build completed for ${{ matrix.os }}"

    - name: Copy additional configuration files
      run: |
        # 确保输出目录存在
        mkdir -p dist/config dist/models
        
        # 复制所有配置文件（包括子目录）
        cp -r config/* dist/config/
        
        # 复制ONNX模型文件到models目录
        cp divere/colorConstancyModels/net_awb.onnx dist/models/
        
        # 显示复制后的文件结构
        echo "📁 Output directory structure:"
        find dist -type f | sort
        
        # 验证关键文件是否存在
        echo "🔍 Verifying key files:"
        ls -la dist/config/
        ls -la dist/models/
        
        # 检查ONNX模型文件大小
        if [ -f "dist/models/net_awb.onnx" ]; then
          echo "✅ ONNX model found: $(du -h dist/models/net_awb.onnx | cut -f1)"
        else
          echo "❌ ONNX model missing!"
          exit 1
        fi

    - name: Create distribution package
      run: |
        cd dist
        if [ "${{ matrix.platform }}" = "windows" ]; then
          # Windows: 创建 zip 包
          powershell Compress-Archive -Path "DiVERE.exe", "models", "config" -DestinationPath "DiVERE-${{ matrix.platform }}.zip"
        elif [ "${{ matrix.platform }}" = "macos" ]; then
          # macOS: 创建 tar.gz 包
          tar -czf "DiVERE-${{ matrix.platform }}.tar.gz" DiVERE models config
        else
          # Linux: 创建 tar.gz 包
          tar -czf "DiVERE-${{ matrix.platform }}.tar.gz" DiVERE models config
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: DiVERE-${{ matrix.platform }}
        path: |
          dist/DiVERE${{ matrix.extension }}
          dist/DiVERE-${{ matrix.platform }}.*
          dist/models/
          dist/config/

    # 自动发布到 GitHub Releases（已注释，用于测试）
    # - name: Create Release
    #   if: startsWith(github.ref, 'refs/tags/')
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: DiVERE ${{ github.ref_name }}
    #     body: |
    #       ## DiVERE ${{ github.ref_name }}
    #       
    #       ### 支持的平台
    #       - Windows (x64)
    #       - macOS (x64)
    #       - Linux (x64)
    #       
    #       ### 下载
    #       请下载对应平台的压缩包：
    #       - Windows: `DiVERE-windows.zip`
    #       - macOS: `DiVERE-macos.tar.gz`
    #       - Linux: `DiVERE-linux.tar.gz`
    #       
    #       ### 安装说明
    #       1. 解压下载的压缩包
    #       2. 运行 `DiVERE` 可执行文件
    #       3. 配置文件位于 `config` 目录
    #       
    #       ### 更新日志
    #       查看 [CHANGELOG.md](CHANGELOG.md) 了解详细更新内容
    #     draft: false
    #     prerelease: false

    # - name: Upload Release Assets
    #   if: startsWith(github.ref, 'refs/tags/')
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: dist/DiVERE-${{ matrix.platform }}.*
    #     asset_name: DiVERE-${{ matrix.platform }}-${{ github.ref_name }}
    #     asset_content_type: application/octet-stream
