name: Test Build (Quick)

on:
  workflow_dispatch:  # 仅手动触发
  push:
    branches: [main]  # 主分支推送时也触发

jobs:
  test-build:
    runs-on: ubuntu-latest  # 仅使用 Ubuntu 进行测试
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test import
      run: |
        python -c "import divere; print('Import successful')"
        python -c "from divere.colorConstancyModels.deep_wb_wrapper import DeepWBWrapper; print('DeepWB import successful')"

    - name: Install Nuitka
      run: |
        pip install nuitka

    - name: Prepare build directories
      run: |
        # 创建输出目录
        mkdir -p dist-test/config dist-test/models
        
        # 预先复制配置文件，这样Nuitka就能找到它们
        echo "📁 Copying configuration files..."
        cp -r config/* dist-test/config/
        
        # 复制ONNX模型文件
        echo "🤖 Copying ONNX model..."
        cp divere/colorConstancyModels/net_awb.onnx dist-test/models/
        
        # 验证文件已复制
        echo "🔍 Verifying files:"
        ls -la dist-test/config/ | head -5
        ls -la dist-test/models/
        
        if [ -f "dist-test/models/net_awb.onnx" ]; then
          echo "✅ ONNX model ready: $(du -h dist-test/models/net_awb.onnx | cut -f1)"
        else
          echo "❌ ONNX model missing!"
          exit 1
        fi

    - name: Build with Nuitka (Manual)
      run: |
        # 现在运行Nuitka编译，此时文件已经在正确位置
        python -m nuitka \
          --standalone \
          --enable-plugin=pyside6 \
          --output-dir=dist-test \
          --include-data-dir=dist-test/config=config \
          --include-data-file=dist-test/models/net_awb.onnx=models/net_awb.onnx \
          --assume-yes-for-downloads \
          divere/__main__.py
        
        echo "✅ Nuitka build completed"
        
        # 显示构建后的文件结构
        echo "📁 Build output structure:"
        find dist-test -type f | sort
        
        # 检查Nuitka的输出
        echo "🔍 Nuitka output directories:"
        ls -la dist-test/
        
        # 查找生成的可执行文件
        echo "🔍 Looking for executable files:"
        find dist-test -name "DiVERE*" -o -name "__main__*" -o -name "*.exe" -o -name "*.bin" | head -10

    - name: Check build output
      run: |
        echo "📁 Checking build output..."
        ls -la dist-test/
        
        # 查找Nuitka生成的可执行文件
        executable=$(find dist-test -name "DiVERE*" -o -name "__main__*" -o -name "*.exe" -o -name "*.bin" | head -1)
        
        if [ -n "$executable" ] && [ -f "$executable" ]; then
          echo "✅ Build successful! Found executable: $executable"
          echo "File size: $(du -h "$executable" | cut -f1)"
          
          # 重命名为我们期望的名称
          if [[ "$executable" != "dist-test/DiVERE-test" ]]; then
            echo "🔄 Renaming executable to DiVERE-test..."
            mv "$executable" "dist-test/DiVERE-test"
            echo "✅ Renamed successfully"
          fi
        else
          echo "❌ Build failed! No executable found"
          echo "Available files:"
          find dist-test -type f | sort
          exit 1
        fi

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-build-ubuntu
        path: dist-test/
        retention-days: 1  # 测试产物只保留1天
