name: Test Build (Quick)

on:
  workflow_dispatch:  # 仅手动触发
  push:
    branches: [main]  # 主分支推送时也触发

jobs:
  test-build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: windows
            arch: x64
          - os: macos-13
            platform: macos
            arch: x64
          - os: macos-14
            platform: macos
            arch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev

    - name: Install system dependencies (macOS)
      if: contains(matrix.os, 'macos')
      run: |
        brew install openssl readline sqlite3 xz zlib

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Nuitka cache
      uses: actions/cache@v4
      with:
        path: nuitka-cache
        key: nuitka-${{ runner.os }}-py-3.11-v1
        restore-keys: |
          nuitka-${{ runner.os }}-py-3.11-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test import
      run: |
        python -c "import divere; print('Import successful')"
        python -c "from divere.colorConstancyModels.deep_wb_wrapper import DeepWBWrapper; print('DeepWB import successful')"

    - name: Install Nuitka
      run: |
        pip install nuitka

    - name: Prepare build directories
      run: |
        # 创建输出目录
        mkdir -p dist-test/config dist-test/models
        
        # 预先复制配置文件，这样Nuitka就能找到它们
        echo "📁 Copying configuration files..."
        cp -r config/* dist-test/config/
        
        # 复制ONNX模型文件
        echo "🤖 Copying ONNX model..."
        cp divere/colorConstancyModels/net_awb.onnx dist-test/models/
        
        # 验证文件已复制
        echo "🔍 Verifying files:"
        ls -la dist-test/config/ | head -5
        ls -la dist-test/models/
        
        if [ -f "dist-test/models/net_awb.onnx" ]; then
          echo "✅ ONNX model ready: $(du -h dist-test/models/net_awb.onnx | cut -f1)"
        else
          echo "❌ ONNX model missing!"
          exit 1
        fi

    - name: Build with Nuitka (Manual)
      run: |
        # 现在运行Nuitka编译，此时文件已经在正确位置
        export NUITKA_CACHE_DIR=$PWD/nuitka-cache
        echo "Using Nuitka cache: $NUITKA_CACHE_DIR"
        
        extra_flags=""
        if [ "${{ matrix.platform }}" = "windows" ]; then
          # Windows 上开启低内存模式，避免大工程编译被取消
          extra_flags="--low-memory"
        fi
        
        python -m nuitka \
          --standalone \
          --enable-plugin=pyside6 \
          --output-dir=dist-test \
          --include-data-dir=dist-test/config=config \
          --include-data-file=dist-test/models/net_awb.onnx=models/net_awb.onnx \
          --assume-yes-for-downloads \
          $extra_flags \
          divere/__main__.py
        
        echo "✅ Nuitka build completed"
        
        # 显示构建后的文件结构（仅文件）
        echo "📁 Build output structure (files):"
        find dist-test -type f | sort
        
        # 显示构建后的目录结构（仅目录）
        echo "📁 Build output structure (dirs):"
        find dist-test -type d -maxdepth 2 | sort

    - name: Sync resources into dist directory
      run: |
        set -e
        echo "🔄 Syncing resources into .dist directory..."
        
        # 探测 .dist 目录
        dist_dir=$(find dist-test -maxdepth 1 -type d -name "*.dist" | head -1)
        echo "Detected dist_dir: ${dist_dir:-<not found>}"
        
        if [ -z "$dist_dir" ]; then
          echo "❌ No .dist directory found. Available dirs:"
          find dist-test -maxdepth 2 -type d | sort
          exit 1
        fi
        
        # 同步 config 与 models 到 .dist 内（保留顶层副本）
        mkdir -p "$dist_dir/config" "$dist_dir/models"
        cp -r dist-test/config/* "$dist_dir/config/"
        cp -r dist-test/models/* "$dist_dir/models/" || true
        
        echo "📁 After sync, .dist content preview:"
        find "$dist_dir" -maxdepth 2 -type f | sort | head -100

    - name: Check build output
      run: |
        set -e
        echo "📁 Checking build output..."
        ls -la dist-test/
        
        # 优先候选：顶层可执行文件
        if [ -f "dist-test/__main__" ] && [ -x "dist-test/__main__" ]; then
          executable="dist-test/__main__"
        # 次优候选：.dist 目录内的可执行文件
        elif [ -f "dist-test/__main__.dist/__main__" ] && [ -x "dist-test/__main__.dist/__main__" ]; then
          executable="dist-test/__main__.dist/__main__"
        else
          # 兜底：跨平台查找可执行文件（macOS 使用 -perm +111，Linux 使用 -perm /111）
          if [ "${RUNNER_OS}" = "macOS" ]; then
            executable=$(find dist-test -type f -perm +111 \
              ! -name "*.so" ! -name "*.dll" ! -name "*.dylib" \
              ! -name "*.py" ! -name "*.pyc" ! -name "*.pyd" \
              | head -1)
          else
            executable=$(find dist-test -type f -perm /111 \
              ! -name "*.so" ! -name "*.dll" ! -name "*.dylib" \
              ! -name "*.py" ! -name "*.pyc" ! -name "*.pyd" \
              | head -1)
          fi
        fi
        
        if [ -n "$executable" ] && [ -f "$executable" ]; then
          echo "✅ Build successful! Found executable: $executable"
          echo "File size: $(du -h "$executable" | cut -f1)"
          echo "👉 On macOS/Linux, run it from within its folder to keep relative libraries resolved."
        else
          echo "❌ Build failed! No executable found"
          echo "Available files:"
          find dist-test -type f | sort
          echo "Available dirs:"
          find dist-test -type d -maxdepth 2 | sort
          exit 1
        fi

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-build-${{ matrix.platform }}-${{ matrix.arch }}
        path: dist-test/
        retention-days: 1  # 测试产物只保留1天
