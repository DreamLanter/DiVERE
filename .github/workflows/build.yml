name: Build DiVERE Application

on:
  push:
    tags: ['v*']  # 发布版本时触发
  pull_request:
    branches: [main, develop]  # PR 时触发
  workflow_dispatch:  # 手动触发

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            extension: ''
          - os: windows-latest
            platform: windows
            arch: x64
            extension: '.exe'
          - os: macos-13
            platform: macos
            arch: x64
            extension: ''
          - os: macos-14
            platform: macos
            arch: arm64
            extension: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev

    - name: Install system dependencies (macOS)
      if: contains(matrix.os, 'macos')
      run: |
        brew install openssl readline sqlite3 xz zlib

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Nuitka
      run: |
        pip install nuitka

    - name: Prepare build directories
      run: |
        # 创建输出目录
        mkdir -p dist/config dist/models
        
        # 预先复制配置文件，这样Nuitka就能找到它们
        echo "📁 Copying configuration files..."
        cp -r config/* dist/config/
        
        # 复制ONNX模型文件
        echo "🤖 Copying ONNX model..."
        cp divere/colorConstancyModels/net_awb.onnx dist/models/
        
        # 验证文件已复制
        echo "🔍 Verifying files:"
        ls -la dist/config/ | head -5
        ls -la dist/models/
        
        if [ -f "dist/models/net_awb.onnx" ]; then
          echo "✅ ONNX model ready: $(du -h dist/models/net_awb.onnx | cut -f1)"
        else
          echo "❌ ONNX model missing!"
          exit 1
        fi

    - name: Build with Nuitka (Manual)
      run: |
        # 现在运行Nuitka编译，此时文件已经在正确位置
        python -m nuitka \
          --standalone \
          --enable-plugin=pyside6 \
          --output-dir=dist \
          --include-data-dir=dist/config=config \
          --include-data-file=dist/models/net_awb.onnx=models/net_awb.onnx \
          --assume-yes-for-downloads \
          ${{ matrix.os == 'windows-latest' && '--windows-disable-console' || '' }} \
          ${{ contains(matrix.os, 'macos') && '--macos-create-app-bundle' || '' }} \
          divere/__main__.py
        
        echo "✅ Nuitka build completed for ${{ matrix.os }}"
        
        # 显示构建后的文件结构
        echo "📁 Build output structure:"
        find dist -type f | sort
        
        # 检查Nuitka的输出
        echo "🔍 Nuitka output directories:"
        ls -la dist/
        
        # 查找生成的可执行文件
        echo "🔍 Looking for executable files:"
        find dist -name "DiVERE*" -o -name "__main__*" -o -name "*.exe" -o -name "*.bin" | head -10

    - name: Sync resources into dist directory
      run: |
        set -e
        echo "🔄 Syncing resources into .dist directory..."
        
        # 探测 .dist 目录
        dist_dir=$(find dist -maxdepth 1 -type d -name "*.dist" | head -1)
        echo "Detected dist_dir: ${dist_dir:-<not found>}"
        
        if [ -z "$dist_dir" ]; then
          echo "❌ No .dist directory found. Available dirs:"
          find dist -maxdepth 2 -type d | sort
          exit 1
        fi
        
        # 同步 config 与 models 到 .dist 内（保留顶层副本）
        mkdir -p "$dist_dir/config" "$dist_dir/models"
        cp -r dist/config/* "$dist_dir/config/"
        cp -r dist/models/* "$dist_dir/models/" || true
        
        echo "📁 After sync, .dist content preview:"
        find "$dist_dir" -maxdepth 2 -type f | sort | head -100

    - name: Prepare distribution package
      run: |
        echo "📁 Preparing distribution package..."
        
        # 查找Nuitka生成的可执行文件
        executable=$(find dist -name "DiVERE*" -o -name "__main__*" -o -name "*.exe" -o -name "*.bin" | head -1)
        
        if [ -n "$executable" ] && [ -f "$executable" ]; then
          echo "✅ Found executable: $executable"
          
          # 重命名为我们期望的名称
          expected_name="DiVERE${{ matrix.extension }}"
          if [[ "$executable" != "dist/$expected_name" ]]; then
            echo "🔄 Renaming executable to $expected_name..."
            mv "$executable" "dist/$expected_name"
            echo "✅ Renamed successfully"
          fi
        else
          echo "❌ No executable found!"
          find dist -type f | sort
          exit 1
        fi

    - name: Create distribution package (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        Set-Location dist
        Compress-Archive -Path "DiVERE.exe", "models", "config" -DestinationPath "DiVERE-${{ matrix.platform }}-${{ matrix.arch }}.zip"

    - name: Create distribution package (Unix)
      if: matrix.platform != 'windows'
      run: |
        cd dist
        tar -czf "DiVERE-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz" DiVERE models config

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: DiVERE-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          dist/DiVERE${{ matrix.extension }}
          dist/DiVERE-${{ matrix.platform }}-${{ matrix.arch }}.*
          dist/models/
          dist/config/
